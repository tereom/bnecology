library(available)
install.packages("available")
library(available)
install.packages("stringdist")
install.packages("stringdist")
library(available)
available("bnecology")
proj_sitrep()
install.packages("styler")
use_r("tif_discretize")
use_package("dplyr")
use_package("raster")
use_package("sf")
tif_path <- "/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/data/rasters_nodes/1_map_rb_2013_12.tif"
ie_path <- "/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/data/rasters_nodes/1_map_rb_2013_12.tif"
extent <- extent(raster(ie_path))
extent <- raster::extent(raster(ie_path))
extent <- raster::extent(raster::raster(ie_path))
raster_cropped <- raster::raster(tif_path) %>%
raster::crop(extent) %>%
raster::extend(extent)
raster::values(raster_cropped)[raster::values(raster_cropped) == -1] <- NA
raster_vals <- raster::values(raster_cropped)
raster_vals
raster::values(raster_cropped)[raster::values(raster_cropped) == -1] <- NA
range(values(raster_cropped))
range(raster::values(raster_cropped))
range(raster::values(raster_cropped), na.rm = TRUE)
range_vals <- range(raster::values(raster_cropped), na.rm = TRUE)
1/breaks
breaks=
4
1/4
range_vals
range_vals[1] >= 0 & range_vals[2] <= 1
devtools::load_all()
devtools::load_all(".")
devtools::document()
?bnecology
?tif_discretize
?dplyr::mutate
use_r("read_shp")
use_package("sf")
read_shp <- function(shp_path, crs, top) {
geom <- sf::read_sf(shp_path)
if (sf::st_geometry_type(sf_geom) != "POLYGON") {
geom <- geom %>%
sf::st_cast("POLYGON")
if (top) {
geom <- geom %>%
dply::mutate(area = sf::st_area(.))  %>%
dplyr::top_n(1, area)
}
}
if (sf::st_crs(geom)$proj4string != crs) {
sf::st_transform(geom, crs)
}
geom
}
devtools::load_all()
devtools::document()
?read.shps
?read.shp
?read_shps
devtools::install()
devtools::install()
shp_paths <- "/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/R/data/edos/Yucatan/Yucatan.shp"
crs = "lcc_mex"
top = TRUE
length(shp_paths)
geom <- read_shp(shp_paths, crs = crs, top = top)
shp_path <- "/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/R/data/edos/Yucatan/Yucatan.shp"
geom <- sf::read_sf(shp_path)
sf::read_sf(shp_path)
sf::read_sf("/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/data/edos/Yucatan/Yucatan.shp")
read_shps("/Users/mortiz/Documents/GitHub/EcosystemIntegrity-I/data/edos/Yucatan/Yucatan.shp")
devtools::load_all()
use_r("fit_bn_fauna")
?dplyr::set_names
?purrr::set_names
?raster::as.data.frame
?raster::as.data.frame
use_r("read_shp_point")
?{{}}
?`{{}}```
?`{{}}`
read_shp <- function(shp_path, crs, filter_var, filter_values) {
geom <- sf::read_sf(shp_path)
if (!missing(filter_var)) {
geom <- geom %>%
dplyr::filter({{var_year}} %in% filter_values)
}
geom %>%
st_transform(crs)
geom
}
#' simple feature.
#' @param shp_paths vector of path to shape files (or single path)
#' @param crs string specifying projection (proj4string) passed to
#' sf::st_transform, defaults to lcc (Mex)
#' @param filter_var optional, if filtering by a variable (for example year)
#' unquoted variable corresponding to the variable name
#' @param filter_values optional, values to keep of filter_var
#' @importFrom magrittr %>%
#' @importFrom rlang{{}}
#' @export
read_shps_points <- function(shp_paths, crs = "lcc_mex", filter_var,
filter_values = NULL) {
if (crs == "lcc_mex") {
crs <- "+proj=lcc +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102 +x_0=2500000 +y_0=0 +datum=WGS84 +units=m +no_defs"
}
if (length(shp_paths) == 1) {
if (!missing(filter_var)) {
geom <- read_shp_points(shp_paths, crs = crs)
} else {
geom <- read_shp_points(shp_paths, crs = crs, {{filter_var}},
filter_values)
}
} else {
if (!missing(filter_var)) {
geom <- purrr::map(shp_paths, read_shp_points, crs = crs) %>%
purrr::reduce(sf::st_union)
} else {
geom <- purrr::map(shp_paths, read_shp_points, crs = crs,
filter_var = {{filter_var}}, filter_values = filter_values) %>%
purrr::reduce(sf::st_union)
}
}
geom
}
?geom
covs_df
covs_df <- covs$covs_df
?rename
fauna_covs
use_package("stringr")
prep_geom_data <- function(fauna_geom, species_var, geom, covs_paths, crs) {
#' called by fit_bn_fauna, prepares data to fit BNs or to evaluate
#' likelihood
#  covs_ind: indices of rasters with covariates to consider
#' returns a list with an entry per species, each entry contains a data
#' frame of categorized covarites suitable for fitting/evaluating a BN
# covariates
covs <- prep_geom_covs(covs_paths, geom)
covs_df <- covs$covs_df
# fauna
fauna_geom <- prep_fauna(fauna_geom, geom, covs$raster_id)
# fauna & covariates
fauna_covs <- fauna_geom %>%
dplyr::left_join(covs_df, by = "id") %>%
dplyr::mutate(id = factor(id))
fauna_df_list <- fauna_covs %>%
dplyr::group_split({{species_var}}) %>%
purrr::map(prep_data_bn)
list(fauna_df_list = fauna_df_list,
covs_df = covs_df %>% dplyr::select(-id) %>% dplyr::distinct())
}
covs_df <- raster::as.data.frame(covs_brick, xy = TRUE, na.rm = TRUE)
devtools::load_all()
warning()
devtools::load_all()
devtools::document()
devtools::document()
devtools::use_package("magrittr")
use_package("magrittr")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
?fit_bn_fauna
use_package("bnlearn")
devtools::load_all(".")
warnings()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::install()
covs_df <- raster::as.data.frame(covs_brick, xy = TRUE, na.rm = FALSE)
devtools::load_all(".")
devtools::load_all(".")
devtools::install()
devtools::install()
prep_data_bn <- function(data_sp, species_var) {
# called by prep_geom_data preparesdata per species (deletes dulpicates and
# NAs)
print(head(data_sp))
data_sp %>%
dplyr::select_if(is.factor) %>%
dplyr::distinct() %>%
dplyr::select(-id, -{{species_var}}) %>%
tidyr::drop_na()
}
devtools::load_all()
prep_geom_data <- function(fauna_geom, species_var, geom, covs_paths, crs) {
#' called by fit_bn_fauna, prepares data to fit BNs or to evaluate
#' likelihood
#  covs_ind: indices of rasters with covariates to consider
#' returns a list with an entry per species, each entry contains a data
#' frame of categorized covarites suitable for fitting/evaluating a BN
# covariates
covs <- prep_geom_covs(covs_paths, geom)
covs_df <- covs$covs_df
# fauna
fauna_df <- prep_geom_fauna(fauna_geom, geom, covs$raster_id)
# fauna & covariates
fauna_covs <- fauna_df %>%
dplyr::left_join(covs_df, by = "id") %>%
dplyr::mutate(id = factor(id))
fauna_df_list <- fauna_covs %>%
dplyr::mutate({{species_var}} = factor({{species_var}})) %>%
dplyr::group_split({{species_var}}) %>%
purrr::map(prep_data_bn, species_var = {{species_var}})
list(fauna_df_list = fauna_df_list,
covs_df = covs_df %>% dplyr::select(-id) %>% dplyr::distinct())
}
devtools::install()
devtools::load_all(".")
devtools::install()
prep_geom_data <- function(fauna_geom, species_var, geom, covs_paths, crs) {
#' called by fit_bn_fauna, prepares data to fit BNs or to evaluate
#' likelihood
#  covs_ind: indices of rasters with covariates to consider
#' returns a list with an entry per species, each entry contains a data
#' frame of categorized covarites suitable for fitting/evaluating a BN
# covariates
covs <- prep_geom_covs(covs_paths, geom)
covs_df <- covs$covs_df
# fauna
fauna_df <- prep_geom_fauna(fauna_geom, geom, covs$raster_id)
# fauna & covariates
fauna_covs <- fauna_df %>%
dplyr::left_join(covs_df, by = "id") %>%
dplyr::mutate(id = factor(id))
fauna_df_list_split <- fauna_covs %>%
dplyr::group_split({{species_var}})
species <- map_chr(fauna_df_list_split, ~dplyr::pull(., {{species_var}})[1])
fauna_df_list <- rlang:::set_names(fauna_df_list_split, species) %>%
purrr::map(prep_data_bn)
list(fauna_df_list = fauna_df_list,
covs_df = covs_df %>% dplyr::select(-id) %>% dplyr::distinct())
}
use_r("test_bn_fauna.R")
fauna_df_list <- fauna_covs[[1]]
?bind_rows
use_package("forcats")
?bind_cols
?one_of
?dplyr::one_of
?dplyr::left_join
?dplyr::left_join
devtools::load_all()
devtools::document()
devtools::install()
